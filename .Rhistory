setwd("iaborrow")
q()
file.show("Read-and-delete-me")
file.remove('Read-and-delete-me')
file.show(file.path("R", "rstanlm-package.R"))
file.show(file.path("R", "rstanlm-package.R"))
example(source)
try(roxygen2::roxygenize(load_code = sourceDir), silent = TRUE)
roxygen2::roxygenize()
library(iaborrow)
library(iaborrow)
n.CT <- 100
n.CC <- 100
nevent.C <- 80
n.EC <- 200
nevent.E <- 120
nevent.C1 <- 40
accrual <- 16
out.mevent.CT <- c(6,9)
out.mevent.CC <- 6
driftHR <- c(0.8,1.0,1.2)
cov.CT <- list(list(dist="norm", mean=0,sd=1),
list(dist="binom",prob=0.2),
list(dist="binom",prob=0.4))
cov.CC <- list(list(dist="norm", mean=0,sd=1),
list(dist="binom",prob=0.2),
list(dist="binom",prob=0.4))
cov.EC <- list(list(dist="norm", mean=0,sd=1),
list(dist="binom",prob=0.2),
list(dist="binom",prob=0.4))
cormat <- rbind(c(1.0,0.1,0.2,0.3),
c(0.1,1.0,0.4,0.5),
c(0.2,0.4,1.0,0.6),
c(0.3,0.5,0.6,1.0))
ncov  <- length(cov.CT)
out.lambda.CT <- log(2)/out.mevent.CT
out.lambda.CC <- log(2)/out.mevent.CC
out.lambda.EC <- out.lambda.CC/driftHR
ls1 <- length(out.lambda.EC)
ls2 <- length(out.lambda.CT)
out.lambda.CT
out.lambda.CC
out.lambda.EC
ss=1
s1=1
s2=1
nsim <- 10
w  <- array(0,dim=c(nsim,ls1,ls2))
p1 <- array(0,dim=c(nsim,ls1,ls2))
p2 <- array(0,dim=c(nsim,ls1,ls2))
marg.CT <- list(list(dist="exp",parm=list(rate=out.lambda.CT[s2])))
marg.CC <- list(list(dist="exp",parm=list(rate=out.lambda.CC)))
marg.EC <- list(list(dist="exp",parm=list(rate=out.lambda.EC[s1])))
for(i in 1:ncov){
if(cov.CT[[i]]$dist=="norm"){
marg.CT <- append(marg.CT,list(list(dist=cov.CT[[i]]$dist,parm=list(mean=cov.CT[[i]]$mean,sd=cov.CT[[i]]$sd))))
marg.CC <- append(marg.CC,list(list(dist=cov.CC[[i]]$dist,parm=list(mean=cov.CC[[i]]$mean,sd=cov.CC[[i]]$sd))))
marg.EC <- append(marg.EC,list(list(dist=cov.EC[[i]]$dist,parm=list(mean=cov.EC[[i]]$mean,sd=cov.EC[[i]]$sd))))
}else if(cov.CT[[i]]$dist=="binom"){
marg.CT <- append(marg.CT,list(list(dist=cov.CT[[i]]$dist,parm=list(size=1,prob=cov.CT[[i]]$prob))))
marg.CC <- append(marg.CC,list(list(dist=cov.CC[[i]]$dist,parm=list(size=1,prob=cov.CC[[i]]$prob))))
marg.EC <- append(marg.EC,list(list(dist=cov.EC[[i]]$dist,parm=list(size=1,prob=cov.EC[[i]]$prob))))
}
}
cvec <- cormat[lower.tri(cormat)]
data.CT <- datagen(margdist=marg.CT,corvec=cvec,nsim=n.CT)
datagen <- function(margdist,corvec,nsim)
{
varnum <- length(margdist)
cormat <- copula::normalCopula(param=corvec,dim=varnum,dispstr="un")
dist <- NULL
parm <- NULL
for(i in 1:varnum){
dist <- c(dist,(margdist[[i]])$dist)
parm <- append(parm,list((margdist[[i]])$parm))
}
mycop <- copula::mvdc(copula=cormat,margins=dist,paramMargins=parm)
return(copula::rMvdc(nsim,mycop))
}
library(copula)
marg.CT <- list(list(dist="exp",parm=list(rate=out.lambda.CT[s2])))
marg.CC <- list(list(dist="exp",parm=list(rate=out.lambda.CC)))
marg.EC <- list(list(dist="exp",parm=list(rate=out.lambda.EC[s1])))
for(i in 1:ncov){
if(cov.CT[[i]]$dist=="norm"){
marg.CT <- append(marg.CT,list(list(dist=cov.CT[[i]]$dist,parm=list(mean=cov.CT[[i]]$mean,sd=cov.CT[[i]]$sd))))
marg.CC <- append(marg.CC,list(list(dist=cov.CC[[i]]$dist,parm=list(mean=cov.CC[[i]]$mean,sd=cov.CC[[i]]$sd))))
marg.EC <- append(marg.EC,list(list(dist=cov.EC[[i]]$dist,parm=list(mean=cov.EC[[i]]$mean,sd=cov.EC[[i]]$sd))))
}else if(cov.CT[[i]]$dist=="binom"){
marg.CT <- append(marg.CT,list(list(dist=cov.CT[[i]]$dist,parm=list(size=1,prob=cov.CT[[i]]$prob))))
marg.CC <- append(marg.CC,list(list(dist=cov.CC[[i]]$dist,parm=list(size=1,prob=cov.CC[[i]]$prob))))
marg.EC <- append(marg.EC,list(list(dist=cov.EC[[i]]$dist,parm=list(size=1,prob=cov.EC[[i]]$prob))))
}
}
cvec <- cormat[lower.tri(cormat)]
data.CT <- datagen(margdist=marg.CT,corvec=cvec,nsim=n.CT)
data.CC <- datagen(margdist=marg.CC,corvec=cvec,nsim=n.CC)
data.EC <- datagen(margdist=marg.EC,corvec=cvec,nsim=n.EC)
data.CT
enroll.time.CT <- runif(n.CT,0,2*acrual)
acrrual
accrual <- 16
enroll.time.CT <- runif(n.CT,0,2*accrual)
enroll.time.CC <- runif(n.CC,0,2*acrrual)
accrual
acrrual
enroll.time.CT <- runif(n.CT,0,2*accrual)
enroll.time.CC <- runif(n.CC,0,2*accrual)
enroll.time.EC <- runif(n.EC,0,2*accrual)
data.CT[,1]
enroll.time.CT
obs.time.CT <- data.CT[,1]+enroll.time.CT
obs.time.CC <- data.CC[,1]+enroll.time.CC
obs.time.EC <- data.EC[,1]+enroll.time.EC
obs.time.CC
obs.time.EC
order(c(obs.time.CT,obs.time.CC))
sort(c(obs.time.CT,obs.time.CC))
sort(c(obs.time.CT,obs.time.CC))[nevent.C]
sort(c(obs.time.CT,obs.time.CC))[nevent.C1]
last.sub.C  <- sort(c(obs.time.CT,obs.time.CC))[nevent.C]
last.sub.C1 <- sort(c(obs.time.CT,obs.time.CC))[nevent.C1]
last.sub.E  <- sort(obs.time.EC)[nevent.E]
last.sub.C
censor.CT <- (obs.time.CT>obs.time.CT)
censor.CT <- as.numeric(obs.time.CT>obs.time.CT)
censor.CT
censor.CT  <- as.numeric(obs.time.CT>last.sub.C)
censor.CT1 <- as.numeric(obs.time.CT>last.sub.C1)
censor.CC  <- as.numeric(obs.time.CC>last.sub.C)
censor.CC1 <- as.numeric(obs.time.CC>last.sub.C1)
censor.EC  <- as.numeric(obs.time.EC>last.sub.E)
data.CT[obs.time.CT<=last.sub.C1,]
obs.time.CT<=last.sub.C1
data.CT[enroll.time.CT<=last.sub.C1,]
enroll.time.CT<=last.sub.C1
data.CC[enroll.time.CC<=last.sub.C1,]
2*accrual
n.CT/accrual
floor(n.CT/accrual)
floor(1.2)
floor(1.4)
floor(1.6)
floor(1.8)
enroll.period <- floor((n.CT+n.CC)/accrual)
enroll.period.C <- floor((n.CT+n.CC)/accrual)
enroll.period.C
enroll.period.C <- floor((n.CT+n.CC)/accrual)+1
enroll.period.C
(n.CT+n.CC)
accrual
n.CT/16
enroll.period.C <- floor((n.CT+n.CC)/accrual)+1
enroll.period.C
n.CT/enroll.period.C
12*16
floor((n.CT+n.CC)/accrual)
16/2
16/3
16/4
accrual*(n.CT/(n.CT+n.CC))
floor(accrual*(n.CT/(n.CT+n.CC)))
ceiling(accrual*(n.CT/(n.CT+n.CC)))
tmp <- rbinom(1,1,0.5)
tmp
tmp <- runif(0,1)
tmp
runif(0,0,1)
runif
runif(1)
enroll.time.CT <- NULL
enroll.time.CC <- NULL
for(i in 1:enroll.period.C){
tmp <- runif(1)
if(tmp<0.5){
tmp.n.CT <- floor(accrual*(n.CT/(n.CT+n.CC)))
}else{
tmp.n.CT <- ceiling(accrual*(n.CT/(n.CT+n.CC)))
}
tmp.n.CC <- accrual-tmp.n.CT
e.st <- i*accrual-accrual
e.en <- i*accrual
enroll.time.CT <- c(enroll.time.CT,runif(tmp.n.CT,e.st,e.en))
enroll.time.CC <- c(enroll.time.CC,runif(tmp.n.CC,e.st,e.en))
}
enroll.time.CT
enroll.time.CC
enroll.period.C <- floor((n.CT+n.CC)/accrual)
enroll.time.CT <- NULL
enroll.time.CC <- NULL
for(i in 1:enroll.period.C){
tmp <- runif(1)
if(tmp<0.5){
tmp.n.CT <- floor(accrual*(n.CT/(n.CT+n.CC)))
}else{
tmp.n.CT <- ceiling(accrual*(n.CT/(n.CT+n.CC)))
}
tmp.n.CC <- accrual-tmp.n.CT
e.st <- i*accrual-accrual
e.en <- i*accrual
enroll.time.CT <- c(enroll.time.CT,runif(tmp.n.CT,e.st,e.en))
enroll.time.CC <- c(enroll.time.CC,runif(tmp.n.CC,e.st,e.en))
}
enroll.time.CC
enroll.time.CT
enroll.period.C
runif(n.CT-length(enroll.time.CT),enroll.time.CT*accrual,(enroll.time.CT+1)*accrual)
enroll.time.CT <- NULL
enroll.time.CC <- NULL
for(i in 1:enroll.period.C){
tmp <- runif(1)
if(tmp<0.5){
tmp.n.CT <- floor(accrual*(n.CT/(n.CT+n.CC)))
}else{
tmp.n.CT <- ceiling(accrual*(n.CT/(n.CT+n.CC)))
}
tmp.n.CC <- accrual-tmp.n.CT
e.st <- i*accrual-accrual
e.en <- i*accrual
enroll.time.CT <- c(enroll.time.CT,runif(tmp.n.CT,e.st,e.en))
enroll.time.CC <- c(enroll.time.CC,runif(tmp.n.CC,e.st,e.en))
}
enroll.time.CT <- c(enroll.time.CT,runif(n.CT-length(enroll.time.CT),enroll.time.CT*accrual,(enroll.time.CT+1)*accrual))
enroll.time.CC <- c(enroll.time.CC,runif(n.CC-length(enroll.time.CC),enroll.time.CC*accrual,(enroll.time.CC+1)*accrual))
enroll.time.CT
enroll.time.CC
enroll.period.E <- floor(n.EC/accrual)
enroll.period.E
n.EC
accrual
enroll.period.C
enroll.period.C <- floor((n.CT+n.CC)/accrual)
enroll.time.CT <- NULL
enroll.time.CC <- NULL
for(i in 1:enroll.period.C){
tmp <- runif(1)
if(tmp<0.5){
tmp.n.CT <- floor(accrual*(n.CT/(n.CT+n.CC)))
}else{
tmp.n.CT <- ceiling(accrual*(n.CT/(n.CT+n.CC)))
}
tmp.n.CC <- accrual-tmp.n.CT
e.st <- i*accrual-accrual
e.en <- i*accrual
enroll.time.CT <- c(enroll.time.CT,runif(tmp.n.CT,e.st,e.en))
enroll.time.CC <- c(enroll.time.CC,runif(tmp.n.CC,e.st,e.en))
}
enroll.time.CT <- c(enroll.time.CT,runif(n.CT-length(enroll.time.CT),enroll.period.C*accrual,(enroll.period.C+1)*accrual))
enroll.time.CC <- c(enroll.time.CC,runif(n.CC-length(enroll.time.CC),enroll.period.C*accrual,(enroll.period.C+1)*accrual))
enroll.time.CT
enroll.period.C <- floor((n.CT+n.CC)/accrual)
enroll.time.CT <- NULL
enroll.time.CC <- NULL
for(i in 1:enroll.period.C){
tmp <- runif(1)
if(tmp<0.5){
tmp.n.CT <- floor(accrual*(n.CT/(n.CT+n.CC)))
}else{
tmp.n.CT <- ceiling(accrual*(n.CT/(n.CT+n.CC)))
}
tmp.n.CC <- accrual-tmp.n.CT
e.st <- i-1
e.en <- i
enroll.time.CT <- c(enroll.time.CT,runif(tmp.n.CT,e.st,e.en))
enroll.time.CC <- c(enroll.time.CC,runif(tmp.n.CC,e.st,e.en))
}
enroll.time.CT <- c(enroll.time.CT,runif(n.CT-length(enroll.time.CT),enroll.period.C,enroll.period.C+1))
enroll.time.CC <- c(enroll.time.CC,runif(n.CC-length(enroll.time.CC),enroll.period.C,enroll.period.C+1))
enroll.time.CT
enroll.time.CC
enroll.time.EC <- NULL
for(i in 1:enroll.period.E){
e.st <- i-1
e.en <- i
enroll.time.EC <- c(enroll.time.CT,runif(accrual,e.st,e.en))
}
enroll.time.EC <- c(enroll.time.EC,runif(n.EC-length(enroll.time.EC),enroll.period.E,enroll.period.E+1))
enroll.time.EC
enroll.period.E
enroll.period.E+1
n.EC
enroll.period.E <- floor(n.EC/accrual)
enroll.period.C <- floor((n.CT+n.CC)/accrual)
enroll.time.CT <- NULL
enroll.time.CC <- NULL
for(i in 1:enroll.period.C){
tmp <- runif(1)
if(tmp<0.5){
tmp.n.CT <- floor(accrual*(n.CT/(n.CT+n.CC)))
}else{
tmp.n.CT <- ceiling(accrual*(n.CT/(n.CT+n.CC)))
}
tmp.n.CC <- accrual-tmp.n.CT
e.st <- i-1
e.en <- i
enroll.time.CT <- c(enroll.time.CT,runif(tmp.n.CT,e.st,e.en))
enroll.time.CC <- c(enroll.time.CC,runif(tmp.n.CC,e.st,e.en))
}
enroll.time.CT <- c(enroll.time.CT,runif(n.CT-length(enroll.time.CT),enroll.period.C,enroll.period.C+1))
enroll.time.CC <- c(enroll.time.CC,runif(n.CC-length(enroll.time.CC),enroll.period.C,enroll.period.C+1))
enroll.period.E <- floor(n.EC/accrual)
enroll.time.EC <- NULL
for(i in 1:enroll.period.E){
e.st <- i-1
e.en <- i
enroll.time.EC <- c(enroll.time.EC,runif(accrual,e.st,e.en))
}
enroll.time.EC <- c(enroll.time.EC,runif(n.EC-length(enroll.time.EC),enroll.period.E,enroll.period.E+1))
enroll.time.EC
obs.time.CT <- data.CT[,1]+enroll.time.CT
obs.time.CC <- data.CC[,1]+enroll.time.CC
obs.time.EC <- data.EC[,1]+enroll.time.EC
last.sub.C  <- sort(c(obs.time.CT,obs.time.CC))[nevent.C]
last.sub.C1 <- sort(c(obs.time.CT,obs.time.CC))[nevent.C1]
last.sub.E  <- sort(obs.time.EC)[nevent.E]
censor.CT <- as.numeric(obs.time.CT>last.sub.C)
censor.CC <- as.numeric(obs.time.CC>last.sub.C)
censor.EC <- as.numeric(obs.time.EC>last.sub.E)
data.CT[enroll.time.CT<=last.sub.C1,]
source("C:/Users/API18340/OneDrive - Astellas Pharma Inc/03. Non-project/1. CIS/2. RWD_HTD/2. Interim analysis/2. R/iaborrow/R/iaborrow.t2e.R", echo=TRUE)
enroll.period.C <- floor((n.CT+n.CC)/accrual)
enroll.time.CT <- NULL
enroll.time.CC <- NULL
for(i in 1:enroll.period.C){
tmp <- runif(1)
if(tmp<0.5){
tmp.n.CT <- floor(accrual*(n.CT/(n.CT+n.CC)))
}else{
tmp.n.CT <- ceiling(accrual*(n.CT/(n.CT+n.CC)))
}
tmp.n.CC <- accrual-tmp.n.CT
e.st <- i-1
e.en <- i
enroll.time.CT <- c(enroll.time.CT,runif(tmp.n.CT,e.st,e.en))
enroll.time.CC <- c(enroll.time.CC,runif(tmp.n.CC,e.st,e.en))
}
enroll.time.CT <- c(enroll.time.CT,runif(n.CT-length(enroll.time.CT),enroll.period.C,enroll.period.C+1))
enroll.time.CC <- c(enroll.time.CC,runif(n.CC-length(enroll.time.CC),enroll.period.C,enroll.period.C+1))
enroll.period.E <- floor(n.EC/accrual)
enroll.time.EC <- NULL
for(i in 1:enroll.period.E){
e.st <- i-1
e.en <- i
enroll.time.EC <- c(enroll.time.EC,runif(accrual,e.st,e.en))
}
enroll.time.EC <- c(enroll.time.EC,runif(n.EC-length(enroll.time.EC),enroll.period.E,enroll.period.E+1))
enroll.time.EC
enroll.time.CT
enroll.time.CC
obs.time.CT <- data.CT[,1]+enroll.time.CT
obs.time.CC <- data.CC[,1]+enroll.time.CC
obs.time.EC <- data.EC[,1]+enroll.time.EC
last.sub.C  <- sort(c(obs.time.CT,obs.time.CC))[nevent.C]
last.sub.C1 <- sort(c(obs.time.CT,obs.time.CC))[nevent.C1]
last.sub.E  <- sort(obs.time.EC)[nevent.E]
censor.CT <- as.numeric(obs.time.CT>last.sub.C)
censor.CC <- as.numeric(obs.time.CC>last.sub.C)
censor.EC <- as.numeric(obs.time.EC>last.sub.E)
censor.CT
censor.CC
censor.EC
(1-censor.CT)+(1-censor.CC)
censor.CT
sum((1-censor.CT))+sum((1-censor.CC))
sum((1-censor.EC))
enroll.time.CT
last.sub.C1
data.CT1   <- data.CT[enroll.time.CT<=last.sub.C1,]
data.CC1   <- data.CC[enroll.time.CC<=last.sub.C1,]
data.CT1
enroll.time.CT<=last.sub.C1
obs.time.CT
obs.time.CT
obs.time.CT>last.sub.C1
obs.time.CC>last.sub.C1
data.CT1   <- data.CT[enroll.time.CT<=last.sub.C1,]
data.CC1   <- data.CC[enroll.time.CC<=last.sub.C1,]
censor.CT1 <- as.numeric(obs.time.CT>last.sub.C1)[enroll.time.CT<=last.sub.C1]
censor.CC1 <- as.numeric(obs.time.CC>last.sub.C1)[enroll.time.CC<=last.sub.C1]
censor.CT1
censor.CC1
sum(1-censor.CT1)+sum(1-censor.CC1)
nrow(data.CT1)
nrow(data.CC1)
sum(censor.CT1==1)
nrow(data.CT1)
sum(censor.CC1==1)
nrow(data.CC1)
data.CT1
data.CT1[censor.CT1==0,1,]
data.CT1[censor.CT1==0,]
dat1 <- list(
nCT_o = sum(censor.CT1==0),
nCT_c = sum(censor.CT1==1),
nCC_o = sum(censor.CC1==0),
nCC_c = sum(censor.CC1==1),
p     = ncov,
yCT_o = data.CT1[censor.CT1==0,1],
yCT_c = data.CT1[censor.CT1==1,1],
yCC_o = data.CC1[censor.CC1==0,1],
yCC_c = data.CC1[censor.CC1==1,1],
xCT_o = data.CT1[censor.CT1==0,-1],
xCT_c = data.CT1[censor.CT1==1,-1],
xCC_o = data.CC1[censor.CC1==0,-1],
xCC_c = data.CC1[censor.CC1==1,-1])
dat1
sum(censor.CT==0)
sum(censor.CT==1)
sum(censor.CC==0)
sum(censor.CC==1)
dat1$yCT
dat1$yCT_o
dat1$yCC_o
c(dat1$yCT_o,dat1$yCC_o)
dat1$xCT_o
pkgbuild::compile_dll()
pkgbuild::compile_dll()
roxygen2::roxygenize()
pkgbuild::compile_dll()
roxygen2::roxygenize()
pkgbuild::compile_dll()
pkgbuild::compile_dll()
pkgbuild::compile_dll()
pkgbuild::compile_dll(path = ".", force = T)
roxygen2::roxygenize()
library(iaborrow)
pkgbuild::compile_dll(path = ".", force = T)
pkgbuild::compile_dll(path = ".", force = T)
pkgbuild::compile_dll(path = ".", force = T)
library(iaborrow)
library(iaborrow)
